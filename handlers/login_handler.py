#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Handler x·ª≠ l√Ω ƒëƒÉng nh·∫≠p v√†o h·ªá th·ªëng HUTECH
"""

import json
import logging
import aiohttp
from typing import Dict, Any, Optional

from config.config import Config

logger = logging.getLogger(__name__)

class LoginHandler:
    def __init__(self, db_manager, cache_manager):
        self.db_manager = db_manager
        self.cache_manager = cache_manager
        self.config = Config()
    
    async def handle_login(self, telegram_user_id: int, username: str, password: str, device_uuid: str) -> Dict[str, Any]:
        """
        X·ª≠ l√Ω ƒëƒÉng nh·∫≠p v√†o h·ªá th·ªëng HUTECH
        
        Args:
            telegram_user_id: ID c·ªßa ng∆∞·ªùi d√πng tr√™n Telegram
            username: T√™n t√†i kho·∫£n HUTECH
            password: M·∫≠t kh·∫©u t√†i kho·∫£n HUTECH
            device_uuid: UUID c·ªßa thi·∫øt b·ªã
            
        Returns:
            Dict ch·ª©a k·∫øt qu·∫£ ƒëƒÉng nh·∫≠p
        """
        try:
            # T·∫°o request data
            request_data = {
                "diuu": device_uuid,
                "username": username,
                "password": password
            }
            
            # G·ªçi API ƒëƒÉng nh·∫≠p
            response_data = await self._call_login_api(request_data)
            
            # Ki·ªÉm tra k·∫øt qu·∫£ ƒëƒÉng nh·∫≠p
            if response_data and "token" in response_data:
                # 1. L∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
                user_saved = await self.db_manager.save_user(telegram_user_id, username, password, device_uuid)
                
                # 2. Sau ƒë√≥ m·ªõi l∆∞u response ƒëƒÉng nh·∫≠p
                response_saved = await self._save_login_response(telegram_user_id, response_data)

                if user_saved and response_saved:
                    # 3. X√≥a cache c≈© c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi ƒë∆∞·ª£c l·∫•y
                    await self.cache_manager.clear_user_cache(telegram_user_id)
                    
                    return {
                        "success": True,
                        "message": "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
                        "data": response_data
                    }
                else:
                    # N·∫øu m·ªôt trong hai b∆∞·ªõc l∆∞u th·∫•t b·∫°i, coi nh∆∞ ƒëƒÉng nh·∫≠p th·∫•t b·∫°i
                    await self.db_manager.set_user_login_status(telegram_user_id, False) # ƒê·∫£m b·∫£o tr·∫°ng th√°i l√† logout
                    return {
                        "success": False,
                        "message": "üö´ *L·ªói*\n\nKh√¥ng th·ªÉ l∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i sau.",
                        "data": None,
                        "show_back_button": True
                    }
            else:
                return {
                    "success": False,
                    "message": "üö´ *ƒêƒÉng nh·∫≠p th·∫•t b·∫°i*\n\nT√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng. Vui l√≤ng ki·ªÉm tra l·∫°i.",
                    "data": response_data,
                    "show_back_button": True
                }
        
        except Exception as e:
            logger.error(f"Login error for user {telegram_user_id}: {e}")
            return {
                "success": False,
                "message": f"üö´ *L·ªói*\n\nƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p: {str(e)}",
                "data": None,
                "show_back_button": True
            }
    
    async def _call_login_api(self, request_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        G·ªçi API ƒëƒÉng nh·∫≠p c·ªßa HUTECH
        
        Args:
            request_data: D·ªØ li·ªáu request
            
        Returns:
            Response data t·ª´ API ho·∫∑c None n·∫øu c√≥ l·ªói
        """
        try:
            url = f"{self.config.HUTECH_API_BASE_URL}{self.config.HUTECH_LOGIN_ENDPOINT}"
            headers = self.config.HUTECH_STUDENT_HEADERS.copy()
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url,
                    headers=headers,
                    json=request_data
                ) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        error_text = await response.text()
                        logger.error(f"Login API error: {response.status} - {error_text}")
                        return {
                            "error": True,
                            "status_code": response.status,
                            "message": error_text
                        }
        
        except aiohttp.ClientError as e:
            logger.error(f"HTTP client error: {e}")
            return {
                "error": True,
                "message": f"L·ªói k·∫øt n·ªëi: {str(e)}"
            }
        except json.JSONDecodeError as e:
            logger.error(f"JSON decode error: {e}")
            return {
                "error": True,
                "message": f"L·ªói ph√¢n t√≠ch d·ªØ li·ªáu: {str(e)}"
            }
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            return {
                "error": True,
                "message": f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}"
            }
    
    async def _save_login_response(self, telegram_user_id: int, response_data: Dict[str, Any]) -> bool:
        """
        L∆∞u response t·ª´ API ƒëƒÉng nh·∫≠p v√†o database
        
        Args:
            telegram_user_id: ID c·ªßa ng∆∞·ªùi d√πng tr√™n Telegram
            response_data: D·ªØ li·ªáu response t·ª´ API
            
        Returns:
            True n·∫øu l∆∞u th√†nh c√¥ng, False n·∫øu c√≥ l·ªói
        """
        try:
            return await self.db_manager.save_login_response(telegram_user_id, response_data)
        except Exception as e:
            logger.error(f"Error saving login response for user {telegram_user_id}: {e}")
            return False
    
    async def get_user_token(self, telegram_user_id: int) -> Optional[str]:
        """
        L·∫•y token c·ªßa ng∆∞·ªùi d√πng t·ª´ database
        
        Args:
            telegram_user_id: ID c·ªßa ng∆∞·ªùi d√πng tr√™n Telegram
            
        Returns:
            Token c·ªßa ng∆∞·ªùi d√πng ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
        """
        try:
            # L·∫•y response ƒëƒÉng nh·∫≠p g·∫ßn nh·∫•t c·ªßa ng∆∞·ªùi d√πng
            response_data = await self.db_manager.get_user_login_response(telegram_user_id)
            
            if response_data and "token" in response_data:
                return response_data["token"]
            
            return None
        
        except Exception as e:
            logger.error(f"Error getting token for user {telegram_user_id}: {e}")
            return None
    
    async def get_user_device_uuid(self, telegram_user_id: int) -> Optional[str]:
        """
        L·∫•y device UUID c·ªßa ng∆∞·ªùi d√πng t·ª´ database
        
        Args:
            telegram_user_id: ID c·ªßa ng∆∞·ªùi d√πng tr√™n Telegram
            
        Returns:
            Device UUID c·ªßa ng∆∞·ªùi d√πng ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
        """
        try:
            user = await self.db_manager.get_user(telegram_user_id)
            if user:
                return user.get("device_uuid")
            return None
        
        except Exception as e:
            logger.error(f"Error getting device UUID for user {telegram_user_id}: {e}")
            return None
    
    async def get_user_info(self, telegram_user_id: int) -> Optional[Dict[str, Any]]:
        """
        L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ response ƒëƒÉng nh·∫≠p g·∫ßn nh·∫•t
        
        Args:
            telegram_user_id: ID c·ªßa ng∆∞·ªùi d√πng tr√™n Telegram
            
        Returns:
            Th√¥ng tin ng∆∞·ªùi d√πng ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
        """
        try:
            # L·∫•y response ƒëƒÉng nh·∫≠p g·∫ßn nh·∫•t c·ªßa ng∆∞·ªùi d√πng
            response_data = await self.db_manager.get_user_login_response(telegram_user_id)
            
            if response_data:
                
                # Tr√≠ch xu·∫•t th√¥ng tin ng∆∞·ªùi d√πng t·ª´ response
                user_info = {}
                
                if "username" in response_data:
                    user_info["username"] = response_data["username"]
                
                if "data" in response_data and isinstance(response_data["data"], dict):
                    data = response_data["data"]
                    if "email" in data:
                        user_info["email"] = data["email"]
                    if "ho_ten" in data:
                        user_info["ho_ten"] = data["ho_ten"]
                    if "so_dien_thoai" in data:
                        user_info["so_dien_thoai"] = data["so_dien_thoai"]
                
                if "old_login_info" in response_data and isinstance(response_data["old_login_info"], dict):
                    old_info = response_data["old_login_info"]
                    if "result" in old_info and isinstance(old_info["result"], dict):
                        result = old_info["result"]
                        if "Ho_Ten" in result:
                            user_info["ho_ten"] = result["Ho_Ten"]
                        if "email" in result:
                            user_info["email"] = result["email"]
                        if "contact_id" in result:
                            user_info["contact_id"] = result["contact_id"]
                
                if "contact_id" in response_data:
                    user_info["contact_id"] = response_data["contact_id"]
                
                return user_info if user_info else None
            
            return None
        
        except Exception as e:
            logger.error(f"Error getting user info for user {telegram_user_id}: {e}")
            return None